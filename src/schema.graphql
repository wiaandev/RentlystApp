type Query {
  """
  Fetches an object given its ID.
  """
  node(
    """
    ID of the object.
    """
    id: ID!
  ): Node

  """
  Lookup nodes by a list of IDs.
  """
  nodes(
    """
    The list of node IDs.
    """
    ids: [ID!]!
  ): [Node]!
  properties(
    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
  ): PropertyPostConnection
  propertiesByUserId(userId: ID!): [PropertyPost!]!
  property(propertyId: ID!): PropertyPost!
  users: [User!]!
  me: User
}

type Mutation {
  login(input: LoginInput!): LoginPayload!
  logout(input: LogoutInput!): LogoutPayload!
  userRegistration(input: UserRegistrationInput!): UserRegistrationPayload!
}

"""
The node interface is implemented by entities that have a global unique identifier.
"""
interface Node {
  id: ID!
}

"""
A local date and time in a particular calendar system, combined with an offset from UTC.
"""
scalar OffsetDateTime

"""
LocalDate is an immutable struct representing a date within the calendar, with no reference to a particular time zone or time of day.
"""
scalar LocalDate

"""
LocalTime is an immutable struct representing a time of day, with no reference to a particular calendar, time zone or date.
"""
scalar LocalTime

"""
The `Upload` scalar type represents a file upload.
"""
scalar Upload

enum ApplyPolicy {
  BEFORE_RESOLVER
  AFTER_RESOLVER
  VALIDATION
}

"""
A connection to a list of items.
"""
type PropertyPostConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  A list of edges.
  """
  edges: [PropertyPostEdge!]

  """
  A flattened list of the nodes.
  """
  nodes: [PropertyPost!]

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
Information about pagination in a connection.
"""
type PageInfo {
  """
  Indicates whether more edges exist following the set defined by the clients arguments.
  """
  hasNextPage: Boolean!

  """
  Indicates whether more edges exist prior the set defined by the clients arguments.
  """
  hasPreviousPage: Boolean!

  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: String

  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: String
}

type PropertyPost implements Node {
  id: ID!
  propertyType: RentType!
  sellerId: Int!
  seller: User!
  weeklyAmount: Int!
  bedroomAmount: Int!
  bathroomAmount: Int!
  parkingAmount: Int!
  petAmount: Int
  petType: [AllowedPetType!]
  createdAt: DateTime!
  address: Address!
  propertyExtras: PropertyExtras
  propertyAddress: Address
}

"""
An edge in a connection.
"""
type PropertyPostEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: PropertyPost!
}

"""
The `DateTime` scalar represents an ISO-8601 compliant date time type.
"""
scalar DateTime @specifiedBy(url: "https://www.graphql-scalars.com/date-time")

enum AllowedPetType {
  DOG
  CAT
  BIRD
}

type Address implements Node {
  id: ID!
  property: PropertyPost!
  propertyPostId: Int!
  streetName: String!
  streetNumber: String!
  suburb: String!
  city: String!
  province: String!
}

type PropertyExtras {
  id: ID!
  propertyPostId: Int!
  property: PropertyPost!
  hasFiber: Boolean!
  petsAllowed: Boolean!
  hasPool: Boolean!
  hasGarden: Boolean!
  hasPatio: Boolean!
  hasFlatlet: Boolean!
}

enum RentType {
  APARTMENT
  HOUSE
  FLAT
  PLOT
  DUPLEX
  TOWNHOUSE
}

input UserRegistrationRequestInput {
  firstName: String!
  lastName: String!
  email: String!
  isRenter: Boolean!
  password: String!
  confirmPassword: String!
  phoneNumber: String!
}

type User implements Node {
  firstName: String!
  lastName: String!
  isDeleted: Boolean!
  adminUser: AdminUser
  isRenter: Boolean!
  properties: [PropertyPost!]!
  id: ID!
  userName: String
  normalizedUserName: String
  email: String
  normalizedEmail: String
  emailConfirmed: Boolean!
  passwordHash: String
  securityStamp: String
  concurrencyStamp: String
  phoneNumber: String
  phoneNumberConfirmed: Boolean!
  twoFactorEnabled: Boolean!
  lockoutEnd: DateTime
  lockoutEnabled: Boolean!
  accessFailedCount: Int!
}

type AdminUser {
  id: ID!
  user: User!
  userId: Int!
}

input LoginInput {
  email: String!
  password: String!
}

type LoginPayload {
  user: User
}

input LogoutInput {
  email: String!
  password: String!
}

type LogoutPayload {
  boolean: Boolean
}

input UserRegistrationInput {
  input: UserRegistrationRequestInput!
}

type UserRegistrationPayload {
  user: User
}
