{
  "version": 3,
  "sources": ["../../@stackworx/react-hook-form-mui/src/Autocomplete.tsx", "../../@stackworx/react-hook-form-mui/src/Checkbox.tsx", "../../@stackworx/react-hook-form-mui/src/CheckboxWithLabel.tsx", "../../@stackworx/react-hook-form-mui/src/CheckboxGroup.tsx", "../../@stackworx/react-hook-form-mui/src/RadioGroup.tsx", "../../@stackworx/react-hook-form-mui/src/Select.tsx", "../../@stackworx/react-hook-form-mui/src/Switch.tsx", "../../@stackworx/react-hook-form-mui/src/TextField.tsx", "../../@stackworx/react-hook-form-mui/src/ToggleButtonGroup.tsx"],
  "sourcesContent": ["import type { ChipTypeMap } from '@mui/material/Chip';\nimport MuiAutocomplete, {\n  AutocompleteProps as MuiAutocompleteProps,\n} from '@mui/material/Autocomplete';\nimport {\n  FieldPath,\n  FieldValues,\n  useController,\n  UseControllerProps,\n} from 'react-hook-form';\n\nexport type AutocompleteProps<\n  TFieldValues extends FieldValues,\n  TName extends FieldPath<TFieldValues>,\n  Value,\n  Multiple extends boolean | undefined,\n  DisableClearable extends boolean | undefined,\n  FreeSolo extends boolean | undefined,\n  ChipComponent extends React.ElementType = ChipTypeMap['defaultComponent'],\n> = UseControllerProps<TFieldValues, TName> &\n  Omit<\n    MuiAutocompleteProps<\n      Value,\n      Multiple,\n      DisableClearable,\n      FreeSolo,\n      ChipComponent\n    >,\n    'name' | 'value' | 'defaultValue'\n  >;\n\nexport function Autocomplete<\n  TFieldValues extends FieldValues,\n  TName extends FieldPath<TFieldValues>,\n  Value = unknown,\n  Multiple extends boolean | undefined = false,\n  DisableClearable extends boolean | undefined = false,\n  FreeSolo extends boolean | undefined = false,\n  ChipComponent extends React.ElementType = ChipTypeMap['defaultComponent'],\n>({\n  name,\n  control,\n  rules,\n  onChange,\n  ...props\n}: AutocompleteProps<\n  TFieldValues,\n  TName,\n  Value,\n  Multiple,\n  DisableClearable,\n  FreeSolo,\n  ChipComponent\n>) {\n  const { field } = useController({\n    name,\n    control,\n    rules,\n  });\n\n  return (\n    <MuiAutocomplete\n      onChange={\n        onChange ??\n        function (_event, value) {\n          field.onChange(value);\n        }\n      }\n      onBlur={field.onBlur}\n      value={field.value}\n      {...props}\n    />\n  );\n}\n\nAutocomplete.displayName = 'MuiReactHookFormAutocomplete';\n", "import {\n  useController,\n  FieldValues,\n  FieldPath,\n  UseControllerProps,\n} from 'react-hook-form';\nimport MuiCheckbox, {\n  CheckboxProps as MuiCheckboxProps,\n} from '@mui/material/Checkbox';\n\nexport type CheckboxProps<\n  TName extends FieldPath<TFieldValues>,\n  TFieldValues extends FieldValues = FieldValues,\n> = UseControllerProps<TFieldValues, TName> &\n  Omit<\n    MuiCheckboxProps,\n    'checked' | 'name' | 'value' | 'defaultChecked' | 'form'\n  >;\n\nexport function Checkbox<\n  TName extends FieldPath<TFieldValues>,\n  TFieldValues extends FieldValues,\n>({ control, name, rules, ...props }: CheckboxProps<TName, TFieldValues>) {\n  const {\n    fieldState: { error },\n    field: { onChange, onBlur, value, ref },\n  } = useController({\n    name,\n    control,\n    rules,\n  });\n\n  return (\n    <MuiCheckbox\n      sx={{\n        ...(error && {\n          color: 'error.main',\n          '&.Mui-checked': {\n            color: 'error.main',\n          },\n        }),\n      }}\n      {...props}\n      checked={Boolean(value)}\n      inputRef={ref}\n      onChange={onChange}\n      onBlur={onBlur}\n      value={value}\n      name={name}\n    />\n  );\n}\n\nCheckbox.displayName = 'MuiReactHookFormCheckbox';\n", "import { FieldValues, FieldPath, useFormState } from 'react-hook-form';\nimport { CheckboxProps, Checkbox } from './Checkbox';\n\nimport FormControlLabel from '@mui/material/FormControlLabel';\n\nexport type CheckboxPropsWithLabelProps<\n  TName extends FieldPath<TFieldValues>,\n  TFieldValues extends FieldValues = FieldValues,\n> = CheckboxProps<TName, TFieldValues> & { label: string };\n\nexport function CheckboxWithLabel<\n  TName extends FieldPath<TFieldValues>,\n  TFieldValues extends FieldValues,\n>({ label, ...props }: CheckboxPropsWithLabelProps<TName, TFieldValues>) {\n  const { errors } = useFormState({\n    control: props.control,\n  });\n\n  return (\n    <FormControlLabel\n      sx={{\n        ...(errors[props.name as keyof typeof errors] && {\n          color: 'error.main',\n        }),\n      }}\n      control={<Checkbox {...props} />}\n      label={label}\n    />\n  );\n}\n\nCheckboxWithLabel.displayName = 'MuiReactHookFormCheckboxWithLabel';\n", "import {\n  useController,\n  FieldValues,\n  UseControllerProps,\n  FieldPath,\n} from 'react-hook-form';\nimport MuiCheckbox, {\n  CheckboxProps as MuiCheckboxProps,\n} from '@mui/material/Checkbox';\n\nexport type CheckboxGroupProps<\n  TName extends FieldPath<TFieldValues>,\n  TFieldValues extends FieldValues = FieldValues,\n> = UseControllerProps<TFieldValues, TName> &\n  Omit<MuiCheckboxProps, 'checked' | 'name' | 'defaultChecked' | 'form'>;\n\nexport function CheckboxGroup<\n  TName extends FieldPath<TFieldValues>,\n  TFieldValues extends FieldValues = FieldValues,\n>({\n  control,\n  name,\n  rules,\n  value,\n  ...props\n}: CheckboxGroupProps<TName, TFieldValues>) {\n  const {\n    field,\n    fieldState: { error },\n  } = useController({\n    name,\n    control,\n    rules,\n  });\n\n  const { onChange, onBlur, ref } = field;\n\n  return (\n    <MuiCheckbox\n      sx={{\n        ...(error && {\n          color: 'error.main',\n          '&.Mui-checked': {\n            color: 'error.main',\n          },\n        }),\n      }}\n      {...props}\n      checked={field.value.includes(value)}\n      inputRef={ref}\n      onChange={(_event, checked) => {\n        if (checked) {\n          onChange([...field.value, value]);\n        } else {\n          onChange(\n            // @ts-expect-error must be array\n            field.value.filter((v) => v !== value)\n          );\n        }\n      }}\n      onBlur={onBlur}\n      value={value}\n      name={name}\n    />\n  );\n}\n\nCheckboxGroup.displayName = 'MuiReactHookFormCheckboxGroup';\n", "import {\n  useController,\n  FieldValues,\n  FieldPath,\n  UseControllerProps,\n  useFormState,\n  Control,\n  FieldError,\n} from 'react-hook-form';\nimport MuiRadioGroup, {\n  RadioGroupProps as MuiRadioGroupProps,\n  useRadioGroup,\n} from '@mui/material/RadioGroup';\nimport { default as MuiRadio, type RadioProps } from '@mui/material/Radio';\n\nexport type RadioGroupProps<\n  TName extends FieldPath<TFieldValues>,\n  TFieldValues extends FieldValues = FieldValues,\n> = UseControllerProps<TFieldValues, TName> &\n  Omit<\n    MuiRadioGroupProps,\n    'checked' | 'name' | 'value' | 'defaultChecked' | 'form'\n  >;\n\nexport function RadioGroup<\n  TName extends FieldPath<TFieldValues>,\n  TFieldValues extends FieldValues,\n>({ control, name, rules, ...props }: RadioGroupProps<TName, TFieldValues>) {\n  const {\n    field: { onChange, onBlur, value },\n  } = useController({\n    name,\n    control,\n    rules,\n  });\n\n  return (\n    <MuiRadioGroup\n      {...props}\n      onChange={onChange}\n      onBlur={onBlur}\n      value={value}\n      name={name}\n    />\n  );\n}\n\nRadioGroup.displayName = 'MuiReactHookFormRadioGroup';\n\ninterface MyRadioProps<T extends FieldValues> extends RadioProps {\n  control: Control<T>;\n}\n\nexport function Radio<T extends FieldValues>({\n  control,\n  ...props\n}: MyRadioProps<T>) {\n  const radioGroup = useRadioGroup();\n  const { errors } = useFormState({ control });\n\n  const fieldName = radioGroup?.name || props.name || '';\n  const fieldError = (errors as Record<string, FieldError>)[fieldName];\n\n  const showError = !!fieldError;\n\n  return (\n    <MuiRadio\n      sx={{\n        ...(showError && {\n          '& .MuiSvgIcon-root': {\n            color: 'error.main',\n          },\n        }),\n      }}\n      {...props}\n    />\n  );\n}\n", "import {\n  useController,\n  FieldValues,\n  UseControllerProps,\n  FieldPath,\n} from 'react-hook-form';\nimport MuiTextField, {\n  TextFieldProps as MuiTextFieldProps,\n} from '@mui/material/TextField';\n\nexport type SelectProps<\n  TName extends FieldPath<TFieldValues>,\n  TFieldValues extends FieldValues = FieldValues,\n> = UseControllerProps<TFieldValues, TName> &\n  Omit<MuiTextFieldProps, 'value' | 'name'>;\n\nexport function Select<\n  TName extends FieldPath<TFieldValues>,\n  TFieldValues extends FieldValues,\n>({ control, name, rules, ...props }: SelectProps<TName, TFieldValues>) {\n  const {\n    field: { onChange, onBlur, value, ref },\n    fieldState: { error },\n  } = useController({\n    name,\n    control,\n    rules,\n  });\n\n  return (\n    <MuiTextField\n      {...props}\n      inputRef={ref}\n      onChange={onChange}\n      onBlur={onBlur}\n      value={value}\n      name={name}\n      error={!!error}\n      helperText={error?.message ?? props.helperText ?? ' '}\n      select //Textfield as Select\n    />\n  );\n}\n\nSelect.displayName = 'MuiReactHookFormSelect';\n", "import {\n  useController,\n  FieldValues,\n  FieldPath,\n  UseControllerProps,\n} from 'react-hook-form';\nimport MuiSwitch, { SwitchProps as MuiSwitchProps } from '@mui/material/Switch';\n\nexport type SwitchProps<\n  TName extends FieldPath<TFieldValues>,\n  TFieldValues extends FieldValues = FieldValues,\n> = UseControllerProps<TFieldValues, TName> &\n  Omit<\n    MuiSwitchProps,\n    'checked' | 'name' | 'value' | 'defaultChecked' | 'form'\n  >;\n\nexport function Switch<\n  TName extends FieldPath<TFieldValues>,\n  TFieldValues extends FieldValues,\n>({ control, name, rules, ...props }: SwitchProps<TName, TFieldValues>) {\n  const {\n    fieldState: { error },\n    field: { onChange, onBlur, value, ref },\n  } = useController({\n    name,\n    control,\n    rules,\n  });\n\n  return (\n    <MuiSwitch\n      sx={{\n        ...(error && {\n          '& .MuiSwitch-thumb': {\n            backgroundColor: 'error.main',\n          },\n          '& .MuiSwitch-track': {\n            backgroundColor: 'error.main',\n          },\n        }),\n      }}\n      {...props}\n      checked={Boolean(value)}\n      inputRef={ref}\n      onChange={onChange}\n      onBlur={onBlur}\n      value={value}\n      // required={!!rules?.required}\n      name={name}\n    />\n  );\n}\n\nSwitch.displayName = 'MuiReactHookFormSwitch';\n", "import {\n  useController,\n  FieldValues,\n  UseControllerProps,\n  FieldPath,\n} from 'react-hook-form';\nimport MuiTextField, {\n  TextFieldProps as MuiTextFieldProps,\n} from '@mui/material/TextField';\n\nexport type TextFieldProps<\n  TName extends FieldPath<TFieldValues>,\n  TFieldValues extends FieldValues = FieldValues,\n> = UseControllerProps<TFieldValues, TName> &\n  Omit<MuiTextFieldProps, 'value' | 'name'>;\n\nexport function TextField<\n  TName extends FieldPath<TFieldValues>,\n  TFieldValues extends FieldValues,\n>({ control, name, rules, ...props }: TextFieldProps<TName, TFieldValues>) {\n  const {\n    field: { onChange, onBlur, value, ref },\n    fieldState: { error },\n  } = useController({\n    name,\n    control,\n    rules,\n  });\n\n  return (\n    <MuiTextField\n      {...props}\n      inputRef={ref}\n      onChange={onChange}\n      onBlur={onBlur}\n      value={value}\n      name={name}\n      error={!!error}\n      helperText={error?.message ?? props.helperText ?? ' '}\n    />\n  );\n}\n\nTextField.displayName = 'MuiReactHookFormTextField';\n", "import {\n  useController,\n  FieldValues,\n  FieldPath,\n  UseControllerProps,\n} from 'react-hook-form';\nimport MuiToggleButtonGroup, {\n  ToggleButtonGroupProps as MuiToggleButtonGroupProps,\n} from '@mui/material/ToggleButtonGroup';\n\nexport type ToggleButtonGroupProps<\n  TName extends FieldPath<TFieldValues>,\n  TFieldValues extends FieldValues = FieldValues,\n> = UseControllerProps<TFieldValues, TName> &\n  Omit<MuiToggleButtonGroupProps, 'name' | 'form' | 'onChange' | 'value'>;\n\nexport function ToggleButtonGroup<\n  TName extends FieldPath<TFieldValues>,\n  TFieldValues extends FieldValues,\n>({\n  control,\n  name,\n  rules,\n  children,\n  ...props\n}: ToggleButtonGroupProps<TName, TFieldValues>) {\n  const { field } = useController({\n    name,\n    control,\n    rules,\n  });\n\n  return (\n    <MuiToggleButtonGroup\n      {...props}\n      value={field.value}\n      onChange={(_event, value) => {\n        field.onChange(value);\n      }}\n      onBlur={field.onBlur}\n    >\n      {children}\n    </MuiToggleButtonGroup>\n  );\n}\n\nToggleButtonGroup.displayName = 'MuiReactHookFormToggleButtonGroup';\n"],
  "mappings": "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",
  "names": []
}
