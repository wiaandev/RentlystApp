import {
  useController,
  useFormState
} from "./chunk-G56VMGMO.js";
import {
  Autocomplete_default,
  Checkbox_default,
  FormControlLabel_default,
  RadioGroup_default,
  Radio_default,
  Switch_default,
  ToggleButtonGroup_default,
  useRadioGroup
} from "./chunk-P4EEXSQ5.js";
import "./chunk-IK4X622D.js";
import {
  TextField_default
} from "./chunk-6AVBI5Q5.js";
import "./chunk-3MWMPIBO.js";
import "./chunk-QT63QQJV.js";
import "./chunk-2Q4MDX6H.js";
import "./chunk-RWZDUEYO.js";
import {
  require_jsx_runtime
} from "./chunk-S725DACQ.js";
import "./chunk-RLJ2RCJQ.js";
import "./chunk-EQCCHGRT.js";
import {
  __toESM
} from "./chunk-DC5AMYBS.js";

// node_modules/@stackworx/react-hook-form-mui/dist/Autocomplete.js
var import_jsx_runtime = __toESM(require_jsx_runtime(), 1);
function Autocomplete({
  name,
  control,
  rules,
  onChange,
  ...props
}) {
  const { field } = useController({
    name,
    control,
    rules
  });
  return (0, import_jsx_runtime.jsx)(
    Autocomplete_default,
    {
      onChange: onChange ?? function(_event, value) {
        field.onChange(value);
      },
      onBlur: field.onBlur,
      value: field.value,
      ...props
    }
  );
}
Autocomplete.displayName = "MuiReactHookFormAutocomplete";

// node_modules/@stackworx/react-hook-form-mui/dist/Checkbox.js
var import_jsx_runtime2 = __toESM(require_jsx_runtime(), 1);
function Checkbox({ control, name, rules, ...props }) {
  const {
    fieldState: { error },
    field: { onChange, onBlur, value, ref }
  } = useController({
    name,
    control,
    rules
  });
  return (0, import_jsx_runtime2.jsx)(
    Checkbox_default,
    {
      sx: {
        ...error && {
          color: "error.main",
          "&.Mui-checked": {
            color: "error.main"
          }
        }
      },
      ...props,
      checked: Boolean(value),
      inputRef: ref,
      onChange,
      onBlur,
      value,
      name
    }
  );
}
Checkbox.displayName = "MuiReactHookFormCheckbox";

// node_modules/@stackworx/react-hook-form-mui/dist/CheckboxWithLabel.js
var import_jsx_runtime3 = __toESM(require_jsx_runtime(), 1);
function CheckboxWithLabel({ label, ...props }) {
  const { errors } = useFormState({
    control: props.control
  });
  return (0, import_jsx_runtime3.jsx)(
    FormControlLabel_default,
    {
      sx: {
        ...errors[props.name] && {
          color: "error.main"
        }
      },
      control: (0, import_jsx_runtime3.jsx)(Checkbox, { ...props }),
      label
    }
  );
}
CheckboxWithLabel.displayName = "MuiReactHookFormCheckboxWithLabel";

// node_modules/@stackworx/react-hook-form-mui/dist/CheckboxGroup.js
var import_jsx_runtime4 = __toESM(require_jsx_runtime(), 1);
function CheckboxGroup({
  control,
  name,
  rules,
  value,
  ...props
}) {
  const {
    field,
    fieldState: { error }
  } = useController({
    name,
    control,
    rules
  });
  const { onChange, onBlur, ref } = field;
  return (0, import_jsx_runtime4.jsx)(
    Checkbox_default,
    {
      sx: {
        ...error && {
          color: "error.main",
          "&.Mui-checked": {
            color: "error.main"
          }
        }
      },
      ...props,
      checked: field.value.includes(value),
      inputRef: ref,
      onChange: (_event, checked) => {
        if (checked) {
          onChange([...field.value, value]);
        } else {
          onChange(
            // @ts-expect-error must be array
            field.value.filter((v) => v !== value)
          );
        }
      },
      onBlur,
      value,
      name
    }
  );
}
CheckboxGroup.displayName = "MuiReactHookFormCheckboxGroup";

// node_modules/@stackworx/react-hook-form-mui/dist/RadioGroup.js
var import_jsx_runtime5 = __toESM(require_jsx_runtime(), 1);
function RadioGroup({ control, name, rules, ...props }) {
  const {
    field: { onChange, onBlur, value }
  } = useController({
    name,
    control,
    rules
  });
  return (0, import_jsx_runtime5.jsx)(
    RadioGroup_default,
    {
      ...props,
      onChange,
      onBlur,
      value,
      name
    }
  );
}
RadioGroup.displayName = "MuiReactHookFormRadioGroup";
function Radio({
  control,
  ...props
}) {
  const radioGroup = useRadioGroup();
  const { errors } = useFormState({ control });
  const fieldName = (radioGroup == null ? void 0 : radioGroup.name) || props.name || "";
  const fieldError = errors[fieldName];
  const showError = !!fieldError;
  return (0, import_jsx_runtime5.jsx)(
    Radio_default,
    {
      sx: {
        ...showError && {
          "& .MuiSvgIcon-root": {
            color: "error.main"
          }
        }
      },
      ...props
    }
  );
}

// node_modules/@stackworx/react-hook-form-mui/dist/Select.js
var import_jsx_runtime6 = __toESM(require_jsx_runtime(), 1);
function Select({ control, name, rules, ...props }) {
  const {
    field: { onChange, onBlur, value, ref },
    fieldState: { error }
  } = useController({
    name,
    control,
    rules
  });
  return (0, import_jsx_runtime6.jsx)(
    TextField_default,
    {
      ...props,
      inputRef: ref,
      onChange,
      onBlur,
      value,
      name,
      error: !!error,
      helperText: (error == null ? void 0 : error.message) ?? props.helperText ?? " ",
      select: true
    }
  );
}
Select.displayName = "MuiReactHookFormSelect";

// node_modules/@stackworx/react-hook-form-mui/dist/Switch.js
var import_jsx_runtime7 = __toESM(require_jsx_runtime(), 1);
function Switch({ control, name, rules, ...props }) {
  const {
    fieldState: { error },
    field: { onChange, onBlur, value, ref }
  } = useController({
    name,
    control,
    rules
  });
  return (0, import_jsx_runtime7.jsx)(
    Switch_default,
    {
      sx: {
        ...error && {
          "& .MuiSwitch-thumb": {
            backgroundColor: "error.main"
          },
          "& .MuiSwitch-track": {
            backgroundColor: "error.main"
          }
        }
      },
      ...props,
      checked: Boolean(value),
      inputRef: ref,
      onChange,
      onBlur,
      value,
      name
    }
  );
}
Switch.displayName = "MuiReactHookFormSwitch";

// node_modules/@stackworx/react-hook-form-mui/dist/TextField.js
var import_jsx_runtime8 = __toESM(require_jsx_runtime(), 1);
function TextField({ control, name, rules, ...props }) {
  const {
    field: { onChange, onBlur, value, ref },
    fieldState: { error }
  } = useController({
    name,
    control,
    rules
  });
  return (0, import_jsx_runtime8.jsx)(
    TextField_default,
    {
      ...props,
      inputRef: ref,
      onChange,
      onBlur,
      value,
      name,
      error: !!error,
      helperText: (error == null ? void 0 : error.message) ?? props.helperText ?? " "
    }
  );
}
TextField.displayName = "MuiReactHookFormTextField";

// node_modules/@stackworx/react-hook-form-mui/dist/ToggleButtonGroup.js
var import_jsx_runtime9 = __toESM(require_jsx_runtime(), 1);
function ToggleButtonGroup({
  control,
  name,
  rules,
  children,
  ...props
}) {
  const { field } = useController({
    name,
    control,
    rules
  });
  return (0, import_jsx_runtime9.jsx)(
    ToggleButtonGroup_default,
    {
      ...props,
      value: field.value,
      onChange: (_event, value) => {
        field.onChange(value);
      },
      onBlur: field.onBlur,
      children
    }
  );
}
ToggleButtonGroup.displayName = "MuiReactHookFormToggleButtonGroup";
export {
  Autocomplete,
  Checkbox,
  CheckboxGroup,
  CheckboxWithLabel,
  Radio,
  RadioGroup,
  Select,
  Switch,
  TextField,
  ToggleButtonGroup
};
//# sourceMappingURL=@stackworx_react-hook-form-mui.js.map
