import { AsYouType } from 'libphonenumber-js';
import { BaseTextFieldProps as BaseTextFieldProps_2 } from '@mui/material';
import { CountryCode } from 'libphonenumber-js';
import { default as default_2 } from 'react';
import { FilledInputProps } from '@mui/material';
import { FormControlProps } from '@mui/material';
import { FormHelperTextProps } from '@mui/material';
import { getNumberType } from 'libphonenumber-js';
import { IconButtonProps } from '@mui/material/IconButton';
import { IconButtonProps as IconButtonProps_2 } from '@mui/material';
import { InputBaseComponentProps } from '@mui/material';
import { InputBaseProps } from '@mui/material';
import { InputLabelProps } from '@mui/material';
import { InputProps } from '@mui/material';
import { MenuProps } from '@mui/material/Menu';
import { MenuProps as MenuProps_2 } from '@mui/material';
import { NumberType } from 'libphonenumber-js';
import { OutlinedInputProps } from '@mui/material';
import { OverridableStringUnion } from '@mui/types';
import { SelectProps } from '@mui/material';
import { SlotProps } from '@mui/material';
import { SxProps } from '@mui/system';
import { TextFieldClasses } from '@mui/material';
import { TextFieldProps } from '@mui/material/TextField';
import { TextFieldPropsColorOverrides } from '@mui/material';
import { TextFieldPropsSizeOverrides } from '@mui/material';
import { TextFieldSlots } from '@mui/material';
import { Theme } from '@mui/material';

export { AsYouType }

declare type BaseTextFieldProps = Omit<TextFieldProps, 'onChange' | 'select' | 'type' | 'multiline' | 'defaultValue' | 'inputProps' | 'InputProps'>;

export declare const classes: {
    readonly textField: "MuiTelInput-TextField";
    readonly flagContainer: "MuiTelInput-Flag";
    readonly flagImg: "MuiTelInput-FlagImg";
    readonly flagButton: "MuiTelInput-IconButton";
    readonly menu: "MuiTelInput-Menu";
    readonly menuItem: "MuiTelInput-MenuItem";
    readonly listItemIconFlag: "MuiTelInput-ListItemIcon-flag";
    readonly listItemTextCountry: "MuiTelInput-ListItemText-country";
    readonly callingCode: "MuiTelInput-Typography-calling-code";
};

declare type ForceCallingCodeWithDefaultCountry = {
    forceCallingCode: true;
    defaultCountry: MuiTelInputCountry;
} | {
    forceCallingCode?: false | undefined;
    defaultCountry?: MuiTelInputCountry;
};

declare type GetFlagElement = (isoCode: MuiTelInputCountry, { countryName, isSelected, imgProps }: {
    countryName: string;
    isSelected: boolean;
    imgProps: React.ComponentPropsWithRef<'img'>;
}) => MuiTelInputFlagElement;

export { getNumberType }

declare const ISO_CODES: CountryCode[];

export declare function matchIsValidTel(text: string, options?: {
    excludedCountries?: MuiTelInputCountry[];
    onlyCountries?: MuiTelInputCountry[];
    continents?: MuiTelInputContinent_2[];
}): boolean;

export declare const MuiTelInput: default_2.ForwardRefExoticComponent<(Omit<{
    label?: default_2.ReactNode;
    slot?: string | undefined;
    style?: default_2.CSSProperties | undefined;
    title?: string | undefined;
    color?: OverridableStringUnion<"primary" | "secondary" | "error" | "info" | "success" | "warning", TextFieldPropsColorOverrides> | undefined;
    content?: string | undefined;
    translate?: "yes" | "no" | undefined;
    margin?: ("dense" | "normal" | "none") | undefined;
    children?: FormControlProps["children"];
    ref?: ((instance: HTMLDivElement | null) => void | default_2.DO_NOT_USE_OR_YOU_WILL_BE_FIRED_CALLBACK_REF_RETURN_VALUES[keyof default_2.DO_NOT_USE_OR_YOU_WILL_BE_FIRED_CALLBACK_REF_RETURN_VALUES]) | default_2.RefObject<HTMLDivElement> | null | undefined;
    className?: string | undefined;
    classes?: Partial<TextFieldClasses> | undefined;
    disabled?: boolean | undefined;
    error?: boolean | undefined;
    fullWidth?: boolean | undefined;
    focused?: boolean | undefined;
    hiddenLabel?: boolean | undefined;
    required?: boolean | undefined;
    size?: OverridableStringUnion<"small" | "medium", TextFieldPropsSizeOverrides> | undefined;
    sx?: SxProps<Theme> | undefined;
    variant?: "filled" | "outlined" | "standard" | undefined;
    key?: default_2.Key | null | undefined;
    defaultChecked?: boolean | undefined;
    suppressContentEditableWarning?: boolean | undefined;
    suppressHydrationWarning?: boolean | undefined;
    accessKey?: string | undefined;
    autoCapitalize?: "off" | "none" | "on" | "sentences" | "words" | "characters" | undefined | (string & {});
    autoFocus?: boolean | undefined;
    contentEditable?: (boolean | "false" | "true") | "inherit" | "plaintext-only" | undefined;
    contextMenu?: string | undefined;
    dir?: string | undefined;
    draggable?: (boolean | "false" | "true") | undefined;
    enterKeyHint?: "enter" | "done" | "go" | "next" | "previous" | "search" | "send" | undefined;
    hidden?: boolean | undefined;
    id?: string | undefined;
    lang?: string | undefined;
    nonce?: string | undefined;
    spellCheck?: (boolean | "false" | "true") | undefined;
    tabIndex?: number | undefined;
    radioGroup?: string | undefined;
    role?: default_2.AriaRole | undefined;
    about?: string | undefined;
    datatype?: string | undefined;
    inlist?: any;
    prefix?: string | undefined;
    property?: string | undefined;
    rel?: string | undefined;
    resource?: string | undefined;
    rev?: string | undefined;
    typeof?: string | undefined;
    vocab?: string | undefined;
    autoCorrect?: string | undefined;
    autoSave?: string | undefined;
    itemProp?: string | undefined;
    itemScope?: boolean | undefined;
    itemType?: string | undefined;
    itemID?: string | undefined;
    itemRef?: string | undefined;
    results?: number | undefined;
    security?: string | undefined;
    unselectable?: "on" | "off" | undefined;
    inputMode?: "none" | "text" | "tel" | "url" | "email" | "numeric" | "decimal" | "search" | undefined;
    is?: string | undefined;
    "aria-activedescendant"?: string | undefined;
    "aria-atomic"?: (boolean | "false" | "true") | undefined;
    "aria-autocomplete"?: "none" | "inline" | "list" | "both" | undefined;
    "aria-braillelabel"?: string | undefined;
    "aria-brailleroledescription"?: string | undefined;
    "aria-busy"?: (boolean | "false" | "true") | undefined;
    "aria-checked"?: boolean | "false" | "mixed" | "true" | undefined;
    "aria-colcount"?: number | undefined;
    "aria-colindex"?: number | undefined;
    "aria-colindextext"?: string | undefined;
    "aria-colspan"?: number | undefined;
    "aria-controls"?: string | undefined;
    "aria-current"?: boolean | "false" | "true" | "page" | "step" | "location" | "date" | "time" | undefined;
    "aria-describedby"?: string | undefined;
    "aria-description"?: string | undefined;
    "aria-details"?: string | undefined;
    "aria-disabled"?: (boolean | "false" | "true") | undefined;
    "aria-dropeffect"?: "none" | "copy" | "execute" | "link" | "move" | "popup" | undefined;
    "aria-errormessage"?: string | undefined;
    "aria-expanded"?: (boolean | "false" | "true") | undefined;
    "aria-flowto"?: string | undefined;
    "aria-grabbed"?: (boolean | "false" | "true") | undefined;
    "aria-haspopup"?: boolean | "false" | "true" | "menu" | "listbox" | "tree" | "grid" | "dialog" | undefined;
    "aria-hidden"?: (boolean | "false" | "true") | undefined;
    "aria-invalid"?: boolean | "false" | "true" | "grammar" | "spelling" | undefined;
    "aria-keyshortcuts"?: string | undefined;
    "aria-label"?: string | undefined;
    "aria-labelledby"?: string | undefined;
    "aria-level"?: number | undefined;
    "aria-live"?: "off" | "assertive" | "polite" | undefined;
    "aria-modal"?: (boolean | "false" | "true") | undefined;
    "aria-multiline"?: (boolean | "false" | "true") | undefined;
    "aria-multiselectable"?: (boolean | "false" | "true") | undefined;
    "aria-orientation"?: "horizontal" | "vertical" | undefined;
    "aria-owns"?: string | undefined;
    "aria-placeholder"?: string | undefined;
    "aria-posinset"?: number | undefined;
    "aria-pressed"?: boolean | "false" | "mixed" | "true" | undefined;
    "aria-readonly"?: (boolean | "false" | "true") | undefined;
    "aria-relevant"?: "additions" | "additions removals" | "additions text" | "all" | "removals" | "removals additions" | "removals text" | "text" | "text additions" | "text removals" | undefined;
    "aria-required"?: (boolean | "false" | "true") | undefined;
    "aria-roledescription"?: string | undefined;
    "aria-rowcount"?: number | undefined;
    "aria-rowindex"?: number | undefined;
    "aria-rowindextext"?: string | undefined;
    "aria-rowspan"?: number | undefined;
    "aria-selected"?: (boolean | "false" | "true") | undefined;
    "aria-setsize"?: number | undefined;
    "aria-sort"?: "none" | "ascending" | "descending" | "other" | undefined;
    "aria-valuemax"?: number | undefined;
    "aria-valuemin"?: number | undefined;
    "aria-valuenow"?: number | undefined;
    "aria-valuetext"?: string | undefined;
    dangerouslySetInnerHTML?: {
        __html: string | TrustedHTML;
    } | undefined;
    onCopy?: default_2.ClipboardEventHandler<HTMLDivElement> | undefined;
    onCopyCapture?: default_2.ClipboardEventHandler<HTMLDivElement> | undefined;
    onCut?: default_2.ClipboardEventHandler<HTMLDivElement> | undefined;
    onCutCapture?: default_2.ClipboardEventHandler<HTMLDivElement> | undefined;
    onPaste?: default_2.ClipboardEventHandler<HTMLDivElement> | undefined;
    onPasteCapture?: default_2.ClipboardEventHandler<HTMLDivElement> | undefined;
    onCompositionEnd?: default_2.CompositionEventHandler<HTMLDivElement> | undefined;
    onCompositionEndCapture?: default_2.CompositionEventHandler<HTMLDivElement> | undefined;
    onCompositionStart?: default_2.CompositionEventHandler<HTMLDivElement> | undefined;
    onCompositionStartCapture?: default_2.CompositionEventHandler<HTMLDivElement> | undefined;
    onCompositionUpdate?: default_2.CompositionEventHandler<HTMLDivElement> | undefined;
    onCompositionUpdateCapture?: default_2.CompositionEventHandler<HTMLDivElement> | undefined;
    onFocus?: InputProps["onFocus"];
    onFocusCapture?: default_2.FocusEventHandler<HTMLDivElement> | undefined;
    onBlur?: InputBaseProps["onBlur"];
    onBlurCapture?: default_2.FocusEventHandler<HTMLDivElement> | undefined;
    onChangeCapture?: default_2.FormEventHandler<HTMLDivElement> | undefined;
    onBeforeInput?: default_2.FormEventHandler<HTMLDivElement> | undefined;
    onBeforeInputCapture?: default_2.FormEventHandler<HTMLDivElement> | undefined;
    onInput?: default_2.FormEventHandler<HTMLDivElement> | undefined;
    onInputCapture?: default_2.FormEventHandler<HTMLDivElement> | undefined;
    onReset?: default_2.FormEventHandler<HTMLDivElement> | undefined;
    onResetCapture?: default_2.FormEventHandler<HTMLDivElement> | undefined;
    onSubmit?: default_2.FormEventHandler<HTMLDivElement> | undefined;
    onSubmitCapture?: default_2.FormEventHandler<HTMLDivElement> | undefined;
    onInvalid?: default_2.FormEventHandler<HTMLDivElement> | undefined;
    onInvalidCapture?: default_2.FormEventHandler<HTMLDivElement> | undefined;
    onLoad?: default_2.ReactEventHandler<HTMLDivElement> | undefined;
    onLoadCapture?: default_2.ReactEventHandler<HTMLDivElement> | undefined;
    onError?: default_2.ReactEventHandler<HTMLDivElement> | undefined;
    onErrorCapture?: default_2.ReactEventHandler<HTMLDivElement> | undefined;
    onKeyDown?: default_2.KeyboardEventHandler<HTMLDivElement> | undefined;
    onKeyDownCapture?: default_2.KeyboardEventHandler<HTMLDivElement> | undefined;
    onKeyPress?: default_2.KeyboardEventHandler<HTMLDivElement> | undefined;
    onKeyPressCapture?: default_2.KeyboardEventHandler<HTMLDivElement> | undefined;
    onKeyUp?: default_2.KeyboardEventHandler<HTMLDivElement> | undefined;
    onKeyUpCapture?: default_2.KeyboardEventHandler<HTMLDivElement> | undefined;
    onAbort?: default_2.ReactEventHandler<HTMLDivElement> | undefined;
    onAbortCapture?: default_2.ReactEventHandler<HTMLDivElement> | undefined;
    onCanPlay?: default_2.ReactEventHandler<HTMLDivElement> | undefined;
    onCanPlayCapture?: default_2.ReactEventHandler<HTMLDivElement> | undefined;
    onCanPlayThrough?: default_2.ReactEventHandler<HTMLDivElement> | undefined;
    onCanPlayThroughCapture?: default_2.ReactEventHandler<HTMLDivElement> | undefined;
    onDurationChange?: default_2.ReactEventHandler<HTMLDivElement> | undefined;
    onDurationChangeCapture?: default_2.ReactEventHandler<HTMLDivElement> | undefined;
    onEmptied?: default_2.ReactEventHandler<HTMLDivElement> | undefined;
    onEmptiedCapture?: default_2.ReactEventHandler<HTMLDivElement> | undefined;
    onEncrypted?: default_2.ReactEventHandler<HTMLDivElement> | undefined;
    onEncryptedCapture?: default_2.ReactEventHandler<HTMLDivElement> | undefined;
    onEnded?: default_2.ReactEventHandler<HTMLDivElement> | undefined;
    onEndedCapture?: default_2.ReactEventHandler<HTMLDivElement> | undefined;
    onLoadedData?: default_2.ReactEventHandler<HTMLDivElement> | undefined;
    onLoadedDataCapture?: default_2.ReactEventHandler<HTMLDivElement> | undefined;
    onLoadedMetadata?: default_2.ReactEventHandler<HTMLDivElement> | undefined;
    onLoadedMetadataCapture?: default_2.ReactEventHandler<HTMLDivElement> | undefined;
    onLoadStart?: default_2.ReactEventHandler<HTMLDivElement> | undefined;
    onLoadStartCapture?: default_2.ReactEventHandler<HTMLDivElement> | undefined;
    onPause?: default_2.ReactEventHandler<HTMLDivElement> | undefined;
    onPauseCapture?: default_2.ReactEventHandler<HTMLDivElement> | undefined;
    onPlay?: default_2.ReactEventHandler<HTMLDivElement> | undefined;
    onPlayCapture?: default_2.ReactEventHandler<HTMLDivElement> | undefined;
    onPlaying?: default_2.ReactEventHandler<HTMLDivElement> | undefined;
    onPlayingCapture?: default_2.ReactEventHandler<HTMLDivElement> | undefined;
    onProgress?: default_2.ReactEventHandler<HTMLDivElement> | undefined;
    onProgressCapture?: default_2.ReactEventHandler<HTMLDivElement> | undefined;
    onRateChange?: default_2.ReactEventHandler<HTMLDivElement> | undefined;
    onRateChangeCapture?: default_2.ReactEventHandler<HTMLDivElement> | undefined;
    onResize?: default_2.ReactEventHandler<HTMLDivElement> | undefined;
    onResizeCapture?: default_2.ReactEventHandler<HTMLDivElement> | undefined;
    onSeeked?: default_2.ReactEventHandler<HTMLDivElement> | undefined;
    onSeekedCapture?: default_2.ReactEventHandler<HTMLDivElement> | undefined;
    onSeeking?: default_2.ReactEventHandler<HTMLDivElement> | undefined;
    onSeekingCapture?: default_2.ReactEventHandler<HTMLDivElement> | undefined;
    onStalled?: default_2.ReactEventHandler<HTMLDivElement> | undefined;
    onStalledCapture?: default_2.ReactEventHandler<HTMLDivElement> | undefined;
    onSuspend?: default_2.ReactEventHandler<HTMLDivElement> | undefined;
    onSuspendCapture?: default_2.ReactEventHandler<HTMLDivElement> | undefined;
    onTimeUpdate?: default_2.ReactEventHandler<HTMLDivElement> | undefined;
    onTimeUpdateCapture?: default_2.ReactEventHandler<HTMLDivElement> | undefined;
    onVolumeChange?: default_2.ReactEventHandler<HTMLDivElement> | undefined;
    onVolumeChangeCapture?: default_2.ReactEventHandler<HTMLDivElement> | undefined;
    onWaiting?: default_2.ReactEventHandler<HTMLDivElement> | undefined;
    onWaitingCapture?: default_2.ReactEventHandler<HTMLDivElement> | undefined;
    onAuxClick?: default_2.MouseEventHandler<HTMLDivElement> | undefined;
    onAuxClickCapture?: default_2.MouseEventHandler<HTMLDivElement> | undefined;
    onClick?: default_2.MouseEventHandler<HTMLDivElement> | undefined;
    onClickCapture?: default_2.MouseEventHandler<HTMLDivElement> | undefined;
    onContextMenu?: default_2.MouseEventHandler<HTMLDivElement> | undefined;
    onContextMenuCapture?: default_2.MouseEventHandler<HTMLDivElement> | undefined;
    onDoubleClick?: default_2.MouseEventHandler<HTMLDivElement> | undefined;
    onDoubleClickCapture?: default_2.MouseEventHandler<HTMLDivElement> | undefined;
    onDrag?: default_2.DragEventHandler<HTMLDivElement> | undefined;
    onDragCapture?: default_2.DragEventHandler<HTMLDivElement> | undefined;
    onDragEnd?: default_2.DragEventHandler<HTMLDivElement> | undefined;
    onDragEndCapture?: default_2.DragEventHandler<HTMLDivElement> | undefined;
    onDragEnter?: default_2.DragEventHandler<HTMLDivElement> | undefined;
    onDragEnterCapture?: default_2.DragEventHandler<HTMLDivElement> | undefined;
    onDragExit?: default_2.DragEventHandler<HTMLDivElement> | undefined;
    onDragExitCapture?: default_2.DragEventHandler<HTMLDivElement> | undefined;
    onDragLeave?: default_2.DragEventHandler<HTMLDivElement> | undefined;
    onDragLeaveCapture?: default_2.DragEventHandler<HTMLDivElement> | undefined;
    onDragOver?: default_2.DragEventHandler<HTMLDivElement> | undefined;
    onDragOverCapture?: default_2.DragEventHandler<HTMLDivElement> | undefined;
    onDragStart?: default_2.DragEventHandler<HTMLDivElement> | undefined;
    onDragStartCapture?: default_2.DragEventHandler<HTMLDivElement> | undefined;
    onDrop?: default_2.DragEventHandler<HTMLDivElement> | undefined;
    onDropCapture?: default_2.DragEventHandler<HTMLDivElement> | undefined;
    onMouseDown?: default_2.MouseEventHandler<HTMLDivElement> | undefined;
    onMouseDownCapture?: default_2.MouseEventHandler<HTMLDivElement> | undefined;
    onMouseEnter?: default_2.MouseEventHandler<HTMLDivElement> | undefined;
    onMouseLeave?: default_2.MouseEventHandler<HTMLDivElement> | undefined;
    onMouseMove?: default_2.MouseEventHandler<HTMLDivElement> | undefined;
    onMouseMoveCapture?: default_2.MouseEventHandler<HTMLDivElement> | undefined;
    onMouseOut?: default_2.MouseEventHandler<HTMLDivElement> | undefined;
    onMouseOutCapture?: default_2.MouseEventHandler<HTMLDivElement> | undefined;
    onMouseOver?: default_2.MouseEventHandler<HTMLDivElement> | undefined;
    onMouseOverCapture?: default_2.MouseEventHandler<HTMLDivElement> | undefined;
    onMouseUp?: default_2.MouseEventHandler<HTMLDivElement> | undefined;
    onMouseUpCapture?: default_2.MouseEventHandler<HTMLDivElement> | undefined;
    onSelect?: default_2.ReactEventHandler<HTMLDivElement> | undefined;
    onSelectCapture?: default_2.ReactEventHandler<HTMLDivElement> | undefined;
    onTouchCancel?: default_2.TouchEventHandler<HTMLDivElement> | undefined;
    onTouchCancelCapture?: default_2.TouchEventHandler<HTMLDivElement> | undefined;
    onTouchEnd?: default_2.TouchEventHandler<HTMLDivElement> | undefined;
    onTouchEndCapture?: default_2.TouchEventHandler<HTMLDivElement> | undefined;
    onTouchMove?: default_2.TouchEventHandler<HTMLDivElement> | undefined;
    onTouchMoveCapture?: default_2.TouchEventHandler<HTMLDivElement> | undefined;
    onTouchStart?: default_2.TouchEventHandler<HTMLDivElement> | undefined;
    onTouchStartCapture?: default_2.TouchEventHandler<HTMLDivElement> | undefined;
    onPointerDown?: default_2.PointerEventHandler<HTMLDivElement> | undefined;
    onPointerDownCapture?: default_2.PointerEventHandler<HTMLDivElement> | undefined;
    onPointerMove?: default_2.PointerEventHandler<HTMLDivElement> | undefined;
    onPointerMoveCapture?: default_2.PointerEventHandler<HTMLDivElement> | undefined;
    onPointerUp?: default_2.PointerEventHandler<HTMLDivElement> | undefined;
    onPointerUpCapture?: default_2.PointerEventHandler<HTMLDivElement> | undefined;
    onPointerCancel?: default_2.PointerEventHandler<HTMLDivElement> | undefined;
    onPointerCancelCapture?: default_2.PointerEventHandler<HTMLDivElement> | undefined;
    onPointerEnter?: default_2.PointerEventHandler<HTMLDivElement> | undefined;
    onPointerLeave?: default_2.PointerEventHandler<HTMLDivElement> | undefined;
    onPointerOver?: default_2.PointerEventHandler<HTMLDivElement> | undefined;
    onPointerOverCapture?: default_2.PointerEventHandler<HTMLDivElement> | undefined;
    onPointerOut?: default_2.PointerEventHandler<HTMLDivElement> | undefined;
    onPointerOutCapture?: default_2.PointerEventHandler<HTMLDivElement> | undefined;
    onGotPointerCapture?: default_2.PointerEventHandler<HTMLDivElement> | undefined;
    onGotPointerCaptureCapture?: default_2.PointerEventHandler<HTMLDivElement> | undefined;
    onLostPointerCapture?: default_2.PointerEventHandler<HTMLDivElement> | undefined;
    onLostPointerCaptureCapture?: default_2.PointerEventHandler<HTMLDivElement> | undefined;
    onScroll?: default_2.UIEventHandler<HTMLDivElement> | undefined;
    onScrollCapture?: default_2.UIEventHandler<HTMLDivElement> | undefined;
    onWheel?: default_2.WheelEventHandler<HTMLDivElement> | undefined;
    onWheelCapture?: default_2.WheelEventHandler<HTMLDivElement> | undefined;
    onAnimationStart?: default_2.AnimationEventHandler<HTMLDivElement> | undefined;
    onAnimationStartCapture?: default_2.AnimationEventHandler<HTMLDivElement> | undefined;
    onAnimationEnd?: default_2.AnimationEventHandler<HTMLDivElement> | undefined;
    onAnimationEndCapture?: default_2.AnimationEventHandler<HTMLDivElement> | undefined;
    onAnimationIteration?: default_2.AnimationEventHandler<HTMLDivElement> | undefined;
    onAnimationIterationCapture?: default_2.AnimationEventHandler<HTMLDivElement> | undefined;
    onTransitionEnd?: default_2.TransitionEventHandler<HTMLDivElement> | undefined;
    onTransitionEndCapture?: default_2.TransitionEventHandler<HTMLDivElement> | undefined;
    component?: default_2.ElementType | undefined;
    autoComplete?: string | undefined;
    FormHelperTextProps?: Partial<FormHelperTextProps> | undefined;
    helperText?: default_2.ReactNode;
    InputLabelProps?: Partial<InputLabelProps> | undefined;
    inputRef?: default_2.Ref<any> | undefined;
    name?: string | undefined;
    placeholder?: string | undefined;
    rows?: (string | number) | undefined;
    maxRows?: (string | number) | undefined;
    minRows?: (string | number) | undefined;
    SelectProps?: Partial<SelectProps> | undefined;
    value?: unknown;
    slots?: Partial<TextFieldSlots> | undefined;
    slotProps?: {
        input?: SlotProps<default_2.ElementType<FilledInputProps, keyof default_2.JSX.IntrinsicElements>, {}, BaseTextFieldProps_2> | undefined;
        inputLabel?: SlotProps<default_2.ElementType<InputLabelProps, keyof default_2.JSX.IntrinsicElements>, {}, BaseTextFieldProps_2> | undefined;
        htmlInput?: SlotProps<default_2.ElementType<InputBaseComponentProps | undefined, keyof default_2.JSX.IntrinsicElements>, {}, BaseTextFieldProps_2> | undefined;
        formHelperText?: SlotProps<default_2.ElementType<FormHelperTextProps, keyof default_2.JSX.IntrinsicElements>, {}, BaseTextFieldProps_2> | undefined;
        select?: SlotProps<default_2.ElementType<SelectProps, keyof default_2.JSX.IntrinsicElements>, {}, BaseTextFieldProps_2> | undefined;
    } | {
        input?: SlotProps<default_2.ElementType<OutlinedInputProps, keyof default_2.JSX.IntrinsicElements>, {}, BaseTextFieldProps_2> | undefined;
        inputLabel?: SlotProps<default_2.ElementType<InputLabelProps, keyof default_2.JSX.IntrinsicElements>, {}, BaseTextFieldProps_2> | undefined;
        htmlInput?: SlotProps<default_2.ElementType<InputBaseComponentProps | undefined, keyof default_2.JSX.IntrinsicElements>, {}, BaseTextFieldProps_2> | undefined;
        formHelperText?: SlotProps<default_2.ElementType<FormHelperTextProps, keyof default_2.JSX.IntrinsicElements>, {}, BaseTextFieldProps_2> | undefined;
        select?: SlotProps<default_2.ElementType<SelectProps, keyof default_2.JSX.IntrinsicElements>, {}, BaseTextFieldProps_2> | undefined;
    } | {
        input?: SlotProps<default_2.ElementType<InputProps, keyof default_2.JSX.IntrinsicElements>, {}, BaseTextFieldProps_2> | undefined;
        inputLabel?: SlotProps<default_2.ElementType<InputLabelProps, keyof default_2.JSX.IntrinsicElements>, {}, BaseTextFieldProps_2> | undefined;
        htmlInput?: SlotProps<default_2.ElementType<InputBaseComponentProps | undefined, keyof default_2.JSX.IntrinsicElements>, {}, BaseTextFieldProps_2> | undefined;
        formHelperText?: SlotProps<default_2.ElementType<FormHelperTextProps, keyof default_2.JSX.IntrinsicElements>, {}, BaseTextFieldProps_2> | undefined;
        select?: SlotProps<default_2.ElementType<SelectProps, keyof default_2.JSX.IntrinsicElements>, {}, BaseTextFieldProps_2> | undefined;
    } | undefined;
} & {
    forceCallingCode: true;
    defaultCountry: MuiTelInputCountry;
} & {
    excludedCountries?: MuiTelInputCountry[];
    onlyCountries?: MuiTelInputCountry[];
    preferredCountries?: MuiTelInputCountry[];
    focusOnSelectCountry?: boolean;
    disableDropdown?: boolean;
    langOfCountryName?: string;
    disableFormatting?: boolean;
    continents?: MuiTelInputContinent[];
    onChange?: (value: string, info: MuiTelInputInfo) => void;
    value?: string | undefined;
    MenuProps?: Partial<MenuProps_2>;
    getFlagElement?: GetFlagElement;
    unknownFlagElement?: MuiTelInputFlagElement;
    FlagIconButtonProps?: Partial<IconButtonProps_2>;
}, "ref"> | Omit<{
    label?: default_2.ReactNode;
    slot?: string | undefined;
    style?: default_2.CSSProperties | undefined;
    title?: string | undefined;
    color?: OverridableStringUnion<"primary" | "secondary" | "error" | "info" | "success" | "warning", TextFieldPropsColorOverrides> | undefined;
    content?: string | undefined;
    translate?: "yes" | "no" | undefined;
    margin?: ("dense" | "normal" | "none") | undefined;
    children?: FormControlProps["children"];
    ref?: ((instance: HTMLDivElement | null) => void | default_2.DO_NOT_USE_OR_YOU_WILL_BE_FIRED_CALLBACK_REF_RETURN_VALUES[keyof default_2.DO_NOT_USE_OR_YOU_WILL_BE_FIRED_CALLBACK_REF_RETURN_VALUES]) | default_2.RefObject<HTMLDivElement> | null | undefined;
    className?: string | undefined;
    classes?: Partial<TextFieldClasses> | undefined;
    disabled?: boolean | undefined;
    error?: boolean | undefined;
    fullWidth?: boolean | undefined;
    focused?: boolean | undefined;
    hiddenLabel?: boolean | undefined;
    required?: boolean | undefined;
    size?: OverridableStringUnion<"small" | "medium", TextFieldPropsSizeOverrides> | undefined;
    sx?: SxProps<Theme> | undefined;
    variant?: "filled" | "outlined" | "standard" | undefined;
    key?: default_2.Key | null | undefined;
    defaultChecked?: boolean | undefined;
    suppressContentEditableWarning?: boolean | undefined;
    suppressHydrationWarning?: boolean | undefined;
    accessKey?: string | undefined;
    autoCapitalize?: "off" | "none" | "on" | "sentences" | "words" | "characters" | undefined | (string & {});
    autoFocus?: boolean | undefined;
    contentEditable?: (boolean | "false" | "true") | "inherit" | "plaintext-only" | undefined;
    contextMenu?: string | undefined;
    dir?: string | undefined;
    draggable?: (boolean | "false" | "true") | undefined;
    enterKeyHint?: "enter" | "done" | "go" | "next" | "previous" | "search" | "send" | undefined;
    hidden?: boolean | undefined;
    id?: string | undefined;
    lang?: string | undefined;
    nonce?: string | undefined;
    spellCheck?: (boolean | "false" | "true") | undefined;
    tabIndex?: number | undefined;
    radioGroup?: string | undefined;
    role?: default_2.AriaRole | undefined;
    about?: string | undefined;
    datatype?: string | undefined;
    inlist?: any;
    prefix?: string | undefined;
    property?: string | undefined;
    rel?: string | undefined;
    resource?: string | undefined;
    rev?: string | undefined;
    typeof?: string | undefined;
    vocab?: string | undefined;
    autoCorrect?: string | undefined;
    autoSave?: string | undefined;
    itemProp?: string | undefined;
    itemScope?: boolean | undefined;
    itemType?: string | undefined;
    itemID?: string | undefined;
    itemRef?: string | undefined;
    results?: number | undefined;
    security?: string | undefined;
    unselectable?: "on" | "off" | undefined;
    inputMode?: "none" | "text" | "tel" | "url" | "email" | "numeric" | "decimal" | "search" | undefined;
    is?: string | undefined;
    "aria-activedescendant"?: string | undefined;
    "aria-atomic"?: (boolean | "false" | "true") | undefined;
    "aria-autocomplete"?: "none" | "inline" | "list" | "both" | undefined;
    "aria-braillelabel"?: string | undefined;
    "aria-brailleroledescription"?: string | undefined;
    "aria-busy"?: (boolean | "false" | "true") | undefined;
    "aria-checked"?: boolean | "false" | "mixed" | "true" | undefined;
    "aria-colcount"?: number | undefined;
    "aria-colindex"?: number | undefined;
    "aria-colindextext"?: string | undefined;
    "aria-colspan"?: number | undefined;
    "aria-controls"?: string | undefined;
    "aria-current"?: boolean | "false" | "true" | "page" | "step" | "location" | "date" | "time" | undefined;
    "aria-describedby"?: string | undefined;
    "aria-description"?: string | undefined;
    "aria-details"?: string | undefined;
    "aria-disabled"?: (boolean | "false" | "true") | undefined;
    "aria-dropeffect"?: "none" | "copy" | "execute" | "link" | "move" | "popup" | undefined;
    "aria-errormessage"?: string | undefined;
    "aria-expanded"?: (boolean | "false" | "true") | undefined;
    "aria-flowto"?: string | undefined;
    "aria-grabbed"?: (boolean | "false" | "true") | undefined;
    "aria-haspopup"?: boolean | "false" | "true" | "menu" | "listbox" | "tree" | "grid" | "dialog" | undefined;
    "aria-hidden"?: (boolean | "false" | "true") | undefined;
    "aria-invalid"?: boolean | "false" | "true" | "grammar" | "spelling" | undefined;
    "aria-keyshortcuts"?: string | undefined;
    "aria-label"?: string | undefined;
    "aria-labelledby"?: string | undefined;
    "aria-level"?: number | undefined;
    "aria-live"?: "off" | "assertive" | "polite" | undefined;
    "aria-modal"?: (boolean | "false" | "true") | undefined;
    "aria-multiline"?: (boolean | "false" | "true") | undefined;
    "aria-multiselectable"?: (boolean | "false" | "true") | undefined;
    "aria-orientation"?: "horizontal" | "vertical" | undefined;
    "aria-owns"?: string | undefined;
    "aria-placeholder"?: string | undefined;
    "aria-posinset"?: number | undefined;
    "aria-pressed"?: boolean | "false" | "mixed" | "true" | undefined;
    "aria-readonly"?: (boolean | "false" | "true") | undefined;
    "aria-relevant"?: "additions" | "additions removals" | "additions text" | "all" | "removals" | "removals additions" | "removals text" | "text" | "text additions" | "text removals" | undefined;
    "aria-required"?: (boolean | "false" | "true") | undefined;
    "aria-roledescription"?: string | undefined;
    "aria-rowcount"?: number | undefined;
    "aria-rowindex"?: number | undefined;
    "aria-rowindextext"?: string | undefined;
    "aria-rowspan"?: number | undefined;
    "aria-selected"?: (boolean | "false" | "true") | undefined;
    "aria-setsize"?: number | undefined;
    "aria-sort"?: "none" | "ascending" | "descending" | "other" | undefined;
    "aria-valuemax"?: number | undefined;
    "aria-valuemin"?: number | undefined;
    "aria-valuenow"?: number | undefined;
    "aria-valuetext"?: string | undefined;
    dangerouslySetInnerHTML?: {
        __html: string | TrustedHTML;
    } | undefined;
    onCopy?: default_2.ClipboardEventHandler<HTMLDivElement> | undefined;
    onCopyCapture?: default_2.ClipboardEventHandler<HTMLDivElement> | undefined;
    onCut?: default_2.ClipboardEventHandler<HTMLDivElement> | undefined;
    onCutCapture?: default_2.ClipboardEventHandler<HTMLDivElement> | undefined;
    onPaste?: default_2.ClipboardEventHandler<HTMLDivElement> | undefined;
    onPasteCapture?: default_2.ClipboardEventHandler<HTMLDivElement> | undefined;
    onCompositionEnd?: default_2.CompositionEventHandler<HTMLDivElement> | undefined;
    onCompositionEndCapture?: default_2.CompositionEventHandler<HTMLDivElement> | undefined;
    onCompositionStart?: default_2.CompositionEventHandler<HTMLDivElement> | undefined;
    onCompositionStartCapture?: default_2.CompositionEventHandler<HTMLDivElement> | undefined;
    onCompositionUpdate?: default_2.CompositionEventHandler<HTMLDivElement> | undefined;
    onCompositionUpdateCapture?: default_2.CompositionEventHandler<HTMLDivElement> | undefined;
    onFocus?: InputProps["onFocus"];
    onFocusCapture?: default_2.FocusEventHandler<HTMLDivElement> | undefined;
    onBlur?: InputBaseProps["onBlur"];
    onBlurCapture?: default_2.FocusEventHandler<HTMLDivElement> | undefined;
    onChangeCapture?: default_2.FormEventHandler<HTMLDivElement> | undefined;
    onBeforeInput?: default_2.FormEventHandler<HTMLDivElement> | undefined;
    onBeforeInputCapture?: default_2.FormEventHandler<HTMLDivElement> | undefined;
    onInput?: default_2.FormEventHandler<HTMLDivElement> | undefined;
    onInputCapture?: default_2.FormEventHandler<HTMLDivElement> | undefined;
    onReset?: default_2.FormEventHandler<HTMLDivElement> | undefined;
    onResetCapture?: default_2.FormEventHandler<HTMLDivElement> | undefined;
    onSubmit?: default_2.FormEventHandler<HTMLDivElement> | undefined;
    onSubmitCapture?: default_2.FormEventHandler<HTMLDivElement> | undefined;
    onInvalid?: default_2.FormEventHandler<HTMLDivElement> | undefined;
    onInvalidCapture?: default_2.FormEventHandler<HTMLDivElement> | undefined;
    onLoad?: default_2.ReactEventHandler<HTMLDivElement> | undefined;
    onLoadCapture?: default_2.ReactEventHandler<HTMLDivElement> | undefined;
    onError?: default_2.ReactEventHandler<HTMLDivElement> | undefined;
    onErrorCapture?: default_2.ReactEventHandler<HTMLDivElement> | undefined;
    onKeyDown?: default_2.KeyboardEventHandler<HTMLDivElement> | undefined;
    onKeyDownCapture?: default_2.KeyboardEventHandler<HTMLDivElement> | undefined;
    onKeyPress?: default_2.KeyboardEventHandler<HTMLDivElement> | undefined;
    onKeyPressCapture?: default_2.KeyboardEventHandler<HTMLDivElement> | undefined;
    onKeyUp?: default_2.KeyboardEventHandler<HTMLDivElement> | undefined;
    onKeyUpCapture?: default_2.KeyboardEventHandler<HTMLDivElement> | undefined;
    onAbort?: default_2.ReactEventHandler<HTMLDivElement> | undefined;
    onAbortCapture?: default_2.ReactEventHandler<HTMLDivElement> | undefined;
    onCanPlay?: default_2.ReactEventHandler<HTMLDivElement> | undefined;
    onCanPlayCapture?: default_2.ReactEventHandler<HTMLDivElement> | undefined;
    onCanPlayThrough?: default_2.ReactEventHandler<HTMLDivElement> | undefined;
    onCanPlayThroughCapture?: default_2.ReactEventHandler<HTMLDivElement> | undefined;
    onDurationChange?: default_2.ReactEventHandler<HTMLDivElement> | undefined;
    onDurationChangeCapture?: default_2.ReactEventHandler<HTMLDivElement> | undefined;
    onEmptied?: default_2.ReactEventHandler<HTMLDivElement> | undefined;
    onEmptiedCapture?: default_2.ReactEventHandler<HTMLDivElement> | undefined;
    onEncrypted?: default_2.ReactEventHandler<HTMLDivElement> | undefined;
    onEncryptedCapture?: default_2.ReactEventHandler<HTMLDivElement> | undefined;
    onEnded?: default_2.ReactEventHandler<HTMLDivElement> | undefined;
    onEndedCapture?: default_2.ReactEventHandler<HTMLDivElement> | undefined;
    onLoadedData?: default_2.ReactEventHandler<HTMLDivElement> | undefined;
    onLoadedDataCapture?: default_2.ReactEventHandler<HTMLDivElement> | undefined;
    onLoadedMetadata?: default_2.ReactEventHandler<HTMLDivElement> | undefined;
    onLoadedMetadataCapture?: default_2.ReactEventHandler<HTMLDivElement> | undefined;
    onLoadStart?: default_2.ReactEventHandler<HTMLDivElement> | undefined;
    onLoadStartCapture?: default_2.ReactEventHandler<HTMLDivElement> | undefined;
    onPause?: default_2.ReactEventHandler<HTMLDivElement> | undefined;
    onPauseCapture?: default_2.ReactEventHandler<HTMLDivElement> | undefined;
    onPlay?: default_2.ReactEventHandler<HTMLDivElement> | undefined;
    onPlayCapture?: default_2.ReactEventHandler<HTMLDivElement> | undefined;
    onPlaying?: default_2.ReactEventHandler<HTMLDivElement> | undefined;
    onPlayingCapture?: default_2.ReactEventHandler<HTMLDivElement> | undefined;
    onProgress?: default_2.ReactEventHandler<HTMLDivElement> | undefined;
    onProgressCapture?: default_2.ReactEventHandler<HTMLDivElement> | undefined;
    onRateChange?: default_2.ReactEventHandler<HTMLDivElement> | undefined;
    onRateChangeCapture?: default_2.ReactEventHandler<HTMLDivElement> | undefined;
    onResize?: default_2.ReactEventHandler<HTMLDivElement> | undefined;
    onResizeCapture?: default_2.ReactEventHandler<HTMLDivElement> | undefined;
    onSeeked?: default_2.ReactEventHandler<HTMLDivElement> | undefined;
    onSeekedCapture?: default_2.ReactEventHandler<HTMLDivElement> | undefined;
    onSeeking?: default_2.ReactEventHandler<HTMLDivElement> | undefined;
    onSeekingCapture?: default_2.ReactEventHandler<HTMLDivElement> | undefined;
    onStalled?: default_2.ReactEventHandler<HTMLDivElement> | undefined;
    onStalledCapture?: default_2.ReactEventHandler<HTMLDivElement> | undefined;
    onSuspend?: default_2.ReactEventHandler<HTMLDivElement> | undefined;
    onSuspendCapture?: default_2.ReactEventHandler<HTMLDivElement> | undefined;
    onTimeUpdate?: default_2.ReactEventHandler<HTMLDivElement> | undefined;
    onTimeUpdateCapture?: default_2.ReactEventHandler<HTMLDivElement> | undefined;
    onVolumeChange?: default_2.ReactEventHandler<HTMLDivElement> | undefined;
    onVolumeChangeCapture?: default_2.ReactEventHandler<HTMLDivElement> | undefined;
    onWaiting?: default_2.ReactEventHandler<HTMLDivElement> | undefined;
    onWaitingCapture?: default_2.ReactEventHandler<HTMLDivElement> | undefined;
    onAuxClick?: default_2.MouseEventHandler<HTMLDivElement> | undefined;
    onAuxClickCapture?: default_2.MouseEventHandler<HTMLDivElement> | undefined;
    onClick?: default_2.MouseEventHandler<HTMLDivElement> | undefined;
    onClickCapture?: default_2.MouseEventHandler<HTMLDivElement> | undefined;
    onContextMenu?: default_2.MouseEventHandler<HTMLDivElement> | undefined;
    onContextMenuCapture?: default_2.MouseEventHandler<HTMLDivElement> | undefined;
    onDoubleClick?: default_2.MouseEventHandler<HTMLDivElement> | undefined;
    onDoubleClickCapture?: default_2.MouseEventHandler<HTMLDivElement> | undefined;
    onDrag?: default_2.DragEventHandler<HTMLDivElement> | undefined;
    onDragCapture?: default_2.DragEventHandler<HTMLDivElement> | undefined;
    onDragEnd?: default_2.DragEventHandler<HTMLDivElement> | undefined;
    onDragEndCapture?: default_2.DragEventHandler<HTMLDivElement> | undefined;
    onDragEnter?: default_2.DragEventHandler<HTMLDivElement> | undefined;
    onDragEnterCapture?: default_2.DragEventHandler<HTMLDivElement> | undefined;
    onDragExit?: default_2.DragEventHandler<HTMLDivElement> | undefined;
    onDragExitCapture?: default_2.DragEventHandler<HTMLDivElement> | undefined;
    onDragLeave?: default_2.DragEventHandler<HTMLDivElement> | undefined;
    onDragLeaveCapture?: default_2.DragEventHandler<HTMLDivElement> | undefined;
    onDragOver?: default_2.DragEventHandler<HTMLDivElement> | undefined;
    onDragOverCapture?: default_2.DragEventHandler<HTMLDivElement> | undefined;
    onDragStart?: default_2.DragEventHandler<HTMLDivElement> | undefined;
    onDragStartCapture?: default_2.DragEventHandler<HTMLDivElement> | undefined;
    onDrop?: default_2.DragEventHandler<HTMLDivElement> | undefined;
    onDropCapture?: default_2.DragEventHandler<HTMLDivElement> | undefined;
    onMouseDown?: default_2.MouseEventHandler<HTMLDivElement> | undefined;
    onMouseDownCapture?: default_2.MouseEventHandler<HTMLDivElement> | undefined;
    onMouseEnter?: default_2.MouseEventHandler<HTMLDivElement> | undefined;
    onMouseLeave?: default_2.MouseEventHandler<HTMLDivElement> | undefined;
    onMouseMove?: default_2.MouseEventHandler<HTMLDivElement> | undefined;
    onMouseMoveCapture?: default_2.MouseEventHandler<HTMLDivElement> | undefined;
    onMouseOut?: default_2.MouseEventHandler<HTMLDivElement> | undefined;
    onMouseOutCapture?: default_2.MouseEventHandler<HTMLDivElement> | undefined;
    onMouseOver?: default_2.MouseEventHandler<HTMLDivElement> | undefined;
    onMouseOverCapture?: default_2.MouseEventHandler<HTMLDivElement> | undefined;
    onMouseUp?: default_2.MouseEventHandler<HTMLDivElement> | undefined;
    onMouseUpCapture?: default_2.MouseEventHandler<HTMLDivElement> | undefined;
    onSelect?: default_2.ReactEventHandler<HTMLDivElement> | undefined;
    onSelectCapture?: default_2.ReactEventHandler<HTMLDivElement> | undefined;
    onTouchCancel?: default_2.TouchEventHandler<HTMLDivElement> | undefined;
    onTouchCancelCapture?: default_2.TouchEventHandler<HTMLDivElement> | undefined;
    onTouchEnd?: default_2.TouchEventHandler<HTMLDivElement> | undefined;
    onTouchEndCapture?: default_2.TouchEventHandler<HTMLDivElement> | undefined;
    onTouchMove?: default_2.TouchEventHandler<HTMLDivElement> | undefined;
    onTouchMoveCapture?: default_2.TouchEventHandler<HTMLDivElement> | undefined;
    onTouchStart?: default_2.TouchEventHandler<HTMLDivElement> | undefined;
    onTouchStartCapture?: default_2.TouchEventHandler<HTMLDivElement> | undefined;
    onPointerDown?: default_2.PointerEventHandler<HTMLDivElement> | undefined;
    onPointerDownCapture?: default_2.PointerEventHandler<HTMLDivElement> | undefined;
    onPointerMove?: default_2.PointerEventHandler<HTMLDivElement> | undefined;
    onPointerMoveCapture?: default_2.PointerEventHandler<HTMLDivElement> | undefined;
    onPointerUp?: default_2.PointerEventHandler<HTMLDivElement> | undefined;
    onPointerUpCapture?: default_2.PointerEventHandler<HTMLDivElement> | undefined;
    onPointerCancel?: default_2.PointerEventHandler<HTMLDivElement> | undefined;
    onPointerCancelCapture?: default_2.PointerEventHandler<HTMLDivElement> | undefined;
    onPointerEnter?: default_2.PointerEventHandler<HTMLDivElement> | undefined;
    onPointerLeave?: default_2.PointerEventHandler<HTMLDivElement> | undefined;
    onPointerOver?: default_2.PointerEventHandler<HTMLDivElement> | undefined;
    onPointerOverCapture?: default_2.PointerEventHandler<HTMLDivElement> | undefined;
    onPointerOut?: default_2.PointerEventHandler<HTMLDivElement> | undefined;
    onPointerOutCapture?: default_2.PointerEventHandler<HTMLDivElement> | undefined;
    onGotPointerCapture?: default_2.PointerEventHandler<HTMLDivElement> | undefined;
    onGotPointerCaptureCapture?: default_2.PointerEventHandler<HTMLDivElement> | undefined;
    onLostPointerCapture?: default_2.PointerEventHandler<HTMLDivElement> | undefined;
    onLostPointerCaptureCapture?: default_2.PointerEventHandler<HTMLDivElement> | undefined;
    onScroll?: default_2.UIEventHandler<HTMLDivElement> | undefined;
    onScrollCapture?: default_2.UIEventHandler<HTMLDivElement> | undefined;
    onWheel?: default_2.WheelEventHandler<HTMLDivElement> | undefined;
    onWheelCapture?: default_2.WheelEventHandler<HTMLDivElement> | undefined;
    onAnimationStart?: default_2.AnimationEventHandler<HTMLDivElement> | undefined;
    onAnimationStartCapture?: default_2.AnimationEventHandler<HTMLDivElement> | undefined;
    onAnimationEnd?: default_2.AnimationEventHandler<HTMLDivElement> | undefined;
    onAnimationEndCapture?: default_2.AnimationEventHandler<HTMLDivElement> | undefined;
    onAnimationIteration?: default_2.AnimationEventHandler<HTMLDivElement> | undefined;
    onAnimationIterationCapture?: default_2.AnimationEventHandler<HTMLDivElement> | undefined;
    onTransitionEnd?: default_2.TransitionEventHandler<HTMLDivElement> | undefined;
    onTransitionEndCapture?: default_2.TransitionEventHandler<HTMLDivElement> | undefined;
    component?: default_2.ElementType | undefined;
    autoComplete?: string | undefined;
    FormHelperTextProps?: Partial<FormHelperTextProps> | undefined;
    helperText?: default_2.ReactNode;
    InputLabelProps?: Partial<InputLabelProps> | undefined;
    inputRef?: default_2.Ref<any> | undefined;
    name?: string | undefined;
    placeholder?: string | undefined;
    rows?: (string | number) | undefined;
    maxRows?: (string | number) | undefined;
    minRows?: (string | number) | undefined;
    SelectProps?: Partial<SelectProps> | undefined;
    value?: unknown;
    slots?: Partial<TextFieldSlots> | undefined;
    slotProps?: {
        input?: SlotProps<default_2.ElementType<FilledInputProps, keyof default_2.JSX.IntrinsicElements>, {}, BaseTextFieldProps_2> | undefined;
        inputLabel?: SlotProps<default_2.ElementType<InputLabelProps, keyof default_2.JSX.IntrinsicElements>, {}, BaseTextFieldProps_2> | undefined;
        htmlInput?: SlotProps<default_2.ElementType<InputBaseComponentProps | undefined, keyof default_2.JSX.IntrinsicElements>, {}, BaseTextFieldProps_2> | undefined;
        formHelperText?: SlotProps<default_2.ElementType<FormHelperTextProps, keyof default_2.JSX.IntrinsicElements>, {}, BaseTextFieldProps_2> | undefined;
        select?: SlotProps<default_2.ElementType<SelectProps, keyof default_2.JSX.IntrinsicElements>, {}, BaseTextFieldProps_2> | undefined;
    } | {
        input?: SlotProps<default_2.ElementType<OutlinedInputProps, keyof default_2.JSX.IntrinsicElements>, {}, BaseTextFieldProps_2> | undefined;
        inputLabel?: SlotProps<default_2.ElementType<InputLabelProps, keyof default_2.JSX.IntrinsicElements>, {}, BaseTextFieldProps_2> | undefined;
        htmlInput?: SlotProps<default_2.ElementType<InputBaseComponentProps | undefined, keyof default_2.JSX.IntrinsicElements>, {}, BaseTextFieldProps_2> | undefined;
        formHelperText?: SlotProps<default_2.ElementType<FormHelperTextProps, keyof default_2.JSX.IntrinsicElements>, {}, BaseTextFieldProps_2> | undefined;
        select?: SlotProps<default_2.ElementType<SelectProps, keyof default_2.JSX.IntrinsicElements>, {}, BaseTextFieldProps_2> | undefined;
    } | {
        input?: SlotProps<default_2.ElementType<InputProps, keyof default_2.JSX.IntrinsicElements>, {}, BaseTextFieldProps_2> | undefined;
        inputLabel?: SlotProps<default_2.ElementType<InputLabelProps, keyof default_2.JSX.IntrinsicElements>, {}, BaseTextFieldProps_2> | undefined;
        htmlInput?: SlotProps<default_2.ElementType<InputBaseComponentProps | undefined, keyof default_2.JSX.IntrinsicElements>, {}, BaseTextFieldProps_2> | undefined;
        formHelperText?: SlotProps<default_2.ElementType<FormHelperTextProps, keyof default_2.JSX.IntrinsicElements>, {}, BaseTextFieldProps_2> | undefined;
        select?: SlotProps<default_2.ElementType<SelectProps, keyof default_2.JSX.IntrinsicElements>, {}, BaseTextFieldProps_2> | undefined;
    } | undefined;
} & {
    forceCallingCode?: false | undefined;
    defaultCountry?: MuiTelInputCountry;
} & {
    excludedCountries?: MuiTelInputCountry[];
    onlyCountries?: MuiTelInputCountry[];
    preferredCountries?: MuiTelInputCountry[];
    focusOnSelectCountry?: boolean;
    disableDropdown?: boolean;
    langOfCountryName?: string;
    disableFormatting?: boolean;
    continents?: MuiTelInputContinent[];
    onChange?: (value: string, info: MuiTelInputInfo) => void;
    value?: string | undefined;
    MenuProps?: Partial<MenuProps_2>;
    getFlagElement?: GetFlagElement;
    unknownFlagElement?: MuiTelInputFlagElement;
    FlagIconButtonProps?: Partial<IconButtonProps_2>;
}, "ref">) & default_2.RefAttributes<HTMLDivElement>>;

export declare type MuiTelInputContinent = 'EU' | 'AS' | 'NA' | 'SA' | 'OC' | 'AF';

declare type MuiTelInputContinent_2 = 'EU' | 'AS' | 'NA' | 'SA' | 'OC' | 'AF'

export declare type MuiTelInputCountry = (typeof ISO_CODES)[number];

export declare type MuiTelInputFlagElement = React.ReactNode;

export declare interface MuiTelInputInfo {
    countryCode: MuiTelInputCountry | null;
    countryCallingCode: string | null;
    nationalNumber: string | null;
    numberType: Exclude<NumberType, undefined> | null;
    numberValue: string | null;
    reason: MuiTelInputReason;
}

export declare type MuiTelInputProps = BaseTextFieldProps & ForceCallingCodeWithDefaultCountry & {
    excludedCountries?: MuiTelInputCountry[];
    onlyCountries?: MuiTelInputCountry[];
    preferredCountries?: MuiTelInputCountry[];
    focusOnSelectCountry?: boolean;
    disableDropdown?: boolean;
    langOfCountryName?: string;
    disableFormatting?: boolean;
    continents?: MuiTelInputContinent[];
    onChange?: (value: string, info: MuiTelInputInfo) => void;
    value?: string | undefined;
    MenuProps?: Partial<MenuProps>;
    getFlagElement?: GetFlagElement;
    unknownFlagElement?: MuiTelInputFlagElement;
    FlagIconButtonProps?: Partial<IconButtonProps>;
};

export declare type MuiTelInputReason = 'country' | 'input';

export declare const textFieldClass = "MuiTelInput-TextField";

export { }
