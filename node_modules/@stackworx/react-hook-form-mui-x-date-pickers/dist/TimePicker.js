import { jsx } from "react/jsx-runtime";
import { useController } from "react-hook-form";
import { TimePicker as TimePicker$1 } from "@mui/x-date-pickers/TimePicker";
import { useUtils, useLocalizationContext, validateTime } from "@mui/x-date-pickers/internals";
import { mapTimePickerValidationErrorMessage } from "./utils/DatePickerValidationErrorsToMessage.js";
function TimePicker({
  name,
  rules,
  control,
  ...props
}) {
  var _a, _b;
  const { slotProps, ...otherPickerProps } = props;
  const { getTimezone } = useUtils();
  const adapter = useLocalizationContext();
  const {
    field: { onChange, value, ref, onBlur },
    fieldState
  } = useController({
    name,
    control,
    rules: {
      ...rules,
      validate: {
        ...rules == null ? void 0 : rules.validate,
        internalMuiError: () => {
          const muiValidationError = validateTime({
            value,
            props: {
              ...props,
              disableFuture: !!props.disableFuture,
              disablePast: !!props.disablePast,
              minTime: props.minTime,
              maxTime: props.maxTime,
              timezone: getTimezone(value)
            },
            adapter
          });
          return mapTimePickerValidationErrorMessage(muiValidationError, props) ?? true;
        }
      }
    }
  });
  return /* @__PURE__ */ jsx(
    TimePicker$1,
    {
      onChange,
      value,
      slotProps: {
        ...slotProps,
        textField: {
          ...slotProps == null ? void 0 : slotProps.textField,
          inputRef: ref,
          error: !!fieldState.error,
          onBlur,
          helperText: (
            //@ts-expect-error incomplete typing
            ((_a = fieldState.error) == null ? void 0 : _a.message) ?? ((_b = slotProps == null ? void 0 : slotProps.textField) == null ? void 0 : _b.helperText)
          )
        }
      },
      ...otherPickerProps
    }
  );
}
export {
  TimePicker
};
//# sourceMappingURL=TimePicker.js.map
