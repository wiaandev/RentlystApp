import { AutocompleteProps as AutocompleteProps_2 } from '@mui/material/Autocomplete';
import { CheckboxProps as CheckboxProps_2 } from '@mui/material/Checkbox';
import { ChipTypeMap } from '@mui/material/Chip';
import { Control } from 'react-hook-form';
import { FieldPath } from 'react-hook-form';
import { FieldValues } from 'react-hook-form';
import { JSX as JSX_2 } from 'react/jsx-runtime';
import { RadioGroupProps as RadioGroupProps_2 } from '@mui/material/RadioGroup';
import { RadioProps } from '@mui/material/Radio';
import { SwitchProps as SwitchProps_2 } from '@mui/material/Switch';
import { TextFieldProps as TextFieldProps_2 } from '@mui/material/TextField';
import { ToggleButtonGroupProps as ToggleButtonGroupProps_2 } from '@mui/material/ToggleButtonGroup';
import { UseControllerProps } from 'react-hook-form';

export declare function Autocomplete<TFieldValues extends FieldValues, TName extends FieldPath<TFieldValues>, Value = unknown, Multiple extends boolean | undefined = false, DisableClearable extends boolean | undefined = false, FreeSolo extends boolean | undefined = false, ChipComponent extends React.ElementType = ChipTypeMap['defaultComponent']>({ name, control, rules, onChange, ...props }: AutocompleteProps<TFieldValues, TName, Value, Multiple, DisableClearable, FreeSolo, ChipComponent>): JSX_2.Element;

export declare namespace Autocomplete {
    var displayName: string;
}

export declare type AutocompleteProps<TFieldValues extends FieldValues, TName extends FieldPath<TFieldValues>, Value, Multiple extends boolean | undefined, DisableClearable extends boolean | undefined, FreeSolo extends boolean | undefined, ChipComponent extends React.ElementType = ChipTypeMap['defaultComponent']> = UseControllerProps<TFieldValues, TName> & Omit<AutocompleteProps_2<Value, Multiple, DisableClearable, FreeSolo, ChipComponent>, 'name' | 'value' | 'defaultValue'>;

export declare function Checkbox<TName extends FieldPath<TFieldValues>, TFieldValues extends FieldValues>({ control, name, rules, ...props }: CheckboxProps<TName, TFieldValues>): JSX_2.Element;

export declare namespace Checkbox {
    var displayName: string;
}

export declare function CheckboxGroup<TName extends FieldPath<TFieldValues>, TFieldValues extends FieldValues = FieldValues>({ control, name, rules, value, ...props }: CheckboxGroupProps<TName, TFieldValues>): JSX_2.Element;

export declare namespace CheckboxGroup {
    var displayName: string;
}

export declare type CheckboxGroupProps<TName extends FieldPath<TFieldValues>, TFieldValues extends FieldValues = FieldValues> = UseControllerProps<TFieldValues, TName> & Omit<CheckboxProps_2, 'checked' | 'name' | 'defaultChecked' | 'form'>;

export declare type CheckboxProps<TName extends FieldPath<TFieldValues>, TFieldValues extends FieldValues = FieldValues> = UseControllerProps<TFieldValues, TName> & Omit<CheckboxProps_2, 'checked' | 'name' | 'value' | 'defaultChecked' | 'form'>;

export declare type CheckboxPropsWithLabelProps<TName extends FieldPath<TFieldValues>, TFieldValues extends FieldValues = FieldValues> = CheckboxProps<TName, TFieldValues> & {
    label: string;
};

export declare function CheckboxWithLabel<TName extends FieldPath<TFieldValues>, TFieldValues extends FieldValues>({ label, ...props }: CheckboxPropsWithLabelProps<TName, TFieldValues>): JSX_2.Element;

export declare namespace CheckboxWithLabel {
    var displayName: string;
}

declare interface MyRadioProps<T extends FieldValues> extends RadioProps {
    control: Control<T>;
}

export declare function Radio<T extends FieldValues>({ control, ...props }: MyRadioProps<T>): JSX_2.Element;

export declare function RadioGroup<TName extends FieldPath<TFieldValues>, TFieldValues extends FieldValues>({ control, name, rules, ...props }: RadioGroupProps<TName, TFieldValues>): JSX_2.Element;

export declare namespace RadioGroup {
    var displayName: string;
}

export declare type RadioGroupProps<TName extends FieldPath<TFieldValues>, TFieldValues extends FieldValues = FieldValues> = UseControllerProps<TFieldValues, TName> & Omit<RadioGroupProps_2, 'checked' | 'name' | 'value' | 'defaultChecked' | 'form'>;

export declare function Select<TName extends FieldPath<TFieldValues>, TFieldValues extends FieldValues>({ control, name, rules, ...props }: SelectProps<TName, TFieldValues>): JSX_2.Element;

export declare namespace Select {
    var displayName: string;
}

export declare type SelectProps<TName extends FieldPath<TFieldValues>, TFieldValues extends FieldValues = FieldValues> = UseControllerProps<TFieldValues, TName> & Omit<TextFieldProps_2, 'value' | 'name'>;

export declare function Switch<TName extends FieldPath<TFieldValues>, TFieldValues extends FieldValues>({ control, name, rules, ...props }: SwitchProps<TName, TFieldValues>): JSX_2.Element;

export declare namespace Switch {
    var displayName: string;
}

export declare type SwitchProps<TName extends FieldPath<TFieldValues>, TFieldValues extends FieldValues = FieldValues> = UseControllerProps<TFieldValues, TName> & Omit<SwitchProps_2, 'checked' | 'name' | 'value' | 'defaultChecked' | 'form'>;

export declare function TextField<TName extends FieldPath<TFieldValues>, TFieldValues extends FieldValues>({ control, name, rules, ...props }: TextFieldProps<TName, TFieldValues>): JSX_2.Element;

export declare namespace TextField {
    var displayName: string;
}

export declare type TextFieldProps<TName extends FieldPath<TFieldValues>, TFieldValues extends FieldValues = FieldValues> = UseControllerProps<TFieldValues, TName> & Omit<TextFieldProps_2, 'value' | 'name'>;

export declare function ToggleButtonGroup<TName extends FieldPath<TFieldValues>, TFieldValues extends FieldValues>({ control, name, rules, children, ...props }: ToggleButtonGroupProps<TName, TFieldValues>): JSX_2.Element;

export declare namespace ToggleButtonGroup {
    var displayName: string;
}

export declare type ToggleButtonGroupProps<TName extends FieldPath<TFieldValues>, TFieldValues extends FieldValues = FieldValues> = UseControllerProps<TFieldValues, TName> & Omit<ToggleButtonGroupProps_2, 'name' | 'form' | 'onChange' | 'value'>;

export { }
