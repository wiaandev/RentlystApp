'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault")["default"];
var _createForOfIteratorHelper2 = _interopRequireDefault(require("@babel/runtime/helpers/createForOfIteratorHelper"));
var _require = require('../store/RelayErrorTrie'),
  RelayFieldError = _require.RelayFieldError;
var RelayFeatureFlags = require('./RelayFeatureFlags');
function handleResolverErrors(environment, relayResolverErrors, throwOnFieldError) {
  var _iterator = (0, _createForOfIteratorHelper2["default"])(relayResolverErrors),
    _step;
  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var resolverError = _step.value;
      environment.relayFieldLogger({
        kind: 'relay_resolver.error',
        owner: resolverError.field.owner,
        fieldPath: resolverError.field.path,
        error: resolverError.error
      });
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }
  if (RelayFeatureFlags.ENABLE_FIELD_ERROR_HANDLING_THROW_BY_DEFAULT || throwOnFieldError) {
    throw new RelayFieldError("Relay: Unexpected resolver exception", relayResolverErrors.map(function (e) {
      return {
        message: e.error.message
      };
    }));
  }
}
function handleFieldErrors(environment, errorResponseFields, shouldThrow) {
  var _iterator2 = (0, _createForOfIteratorHelper2["default"])(errorResponseFields),
    _step2;
  try {
    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
      var fieldError = _step2.value;
      var path = fieldError.path,
        owner = fieldError.owner,
        error = fieldError.error;
      if (fieldError.type === 'MISSING_DATA') {
        logMissingData(environment, shouldThrow);
      } else {
        environment.relayFieldLogger({
          kind: 'relay_field_payload.error',
          owner: owner,
          fieldPath: path,
          error: error
        });
      }
    }
  } catch (err) {
    _iterator2.e(err);
  } finally {
    _iterator2.f();
  }
  if (shouldThrow) {
    throw new RelayFieldError("Relay: Unexpected response payload - this object includes an errors property in which you can access the underlying errors", errorResponseFields.map(function (_ref) {
      var error = _ref.error;
      return error;
    }));
  }
}
function logMissingData(environment, throwing) {
  if (!throwing) {
    environment.relayFieldLogger({
      kind: 'missing_expected_data.log',
      owner: '',
      fieldPath: ''
    });
    return;
  }
  environment.relayFieldLogger({
    kind: 'missing_expected_data.throw',
    owner: '',
    fieldPath: ''
  });
}
function handleMissingRequiredFields(environment, missingRequiredFields) {
  switch (missingRequiredFields.action) {
    case 'THROW':
      {
        var _missingRequiredField = missingRequiredFields.field,
          path = _missingRequiredField.path,
          owner = _missingRequiredField.owner;
        environment.relayFieldLogger({
          kind: 'missing_field.throw',
          owner: owner,
          fieldPath: path
        });
        throw new Error("Relay: Missing @required value at path '".concat(path, "' in '").concat(owner, "'."));
      }
    case 'LOG':
      missingRequiredFields.fields.forEach(function (_ref2) {
        var path = _ref2.path,
          owner = _ref2.owner;
        environment.relayFieldLogger({
          kind: 'missing_field.log',
          owner: owner,
          fieldPath: path
        });
      });
      break;
    default:
      {
        missingRequiredFields.action;
      }
  }
}
function handleMissingDataError(environment, throwOnFieldErrorDirective) {
  logMissingData(environment, throwOnFieldErrorDirective);
  if (throwOnFieldErrorDirective) {
    throw new RelayFieldError("Relay: Missing data for one or more fields");
  }
}
function handlePotentialSnapshotErrors(environment, missingRequiredFields, relayResolverErrors, errorResponseFields, throwOnFieldError) {
  var onlyHasMissingDataErrors = Boolean(errorResponseFields === null || errorResponseFields === void 0 ? void 0 : errorResponseFields.every(function (field) {
    return field.type === 'MISSING_DATA';
  }));
  if (onlyHasMissingDataErrors) {
    handleMissingDataError(environment, throwOnFieldError);
  }
  if (relayResolverErrors.length > 0) {
    handleResolverErrors(environment, relayResolverErrors, throwOnFieldError);
  }
  if (missingRequiredFields != null) {
    handleMissingRequiredFields(environment, missingRequiredFields);
  }
  if (errorResponseFields != null && !onlyHasMissingDataErrors) {
    handleFieldErrors(environment, errorResponseFields, throwOnFieldError);
  }
}
module.exports = handlePotentialSnapshotErrors;